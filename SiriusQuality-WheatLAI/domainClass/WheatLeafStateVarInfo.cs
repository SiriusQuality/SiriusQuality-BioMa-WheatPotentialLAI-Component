//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

/// 
/// This class was created from file C:\Users\mancealo\Documents\GitSiriusCode\SiriusCode\Development2\Code\SiriusQuality-WheatLAI\XML\SiriusQualityWheatLAI_WheatLeafState.xml
/// The tool used was: DCC - Domain Class Coder, http://components.biomamodelling.org/, DCC
/// 
/// Loic Manceau
/// loic.manceau@inra.fr
/// INRA
/// 
/// 
/// 10/4/2018 11:57:05 AM
/// 
namespace SiriusQualityWheatLAI
{
    using System;
    using CRA.ModelLayer.Core;
    
    
    /// <summary>WheatLeafStateVarInfoClasses contain the attributes for each variable in the domain class RainData. Attributes are valorized via the static constructor. The data-type VarInfo causes  a dependency to the assembly CRA.Core.Preconditions.dll</summary>
    public class WheatLeafStateVarInfo : IVarInfoClass
    {
        
        #region Private fields
        static VarInfo _State = new VarInfo();
        
        static VarInfo _PreviousState = new VarInfo();
        
        static VarInfo _isPrematurelyDying = new VarInfo();
        
        static VarInfo _TTGroLamina = new VarInfo();
        
        static VarInfo _MaxAI = new VarInfo();
        
        static VarInfo _TTsen = new VarInfo();
        
        static VarInfo _TTem = new VarInfo();
        
        static VarInfo _LaminaAI = new VarInfo();
        
        static VarInfo _SheathAI = new VarInfo();
        
        static VarInfo _GAI = new VarInfo();
        
        static VarInfo _TTmat = new VarInfo();
        
        static VarInfo _laminaSpecificN = new VarInfo();
        
        static VarInfo _Phyllochron = new VarInfo();
        
        static VarInfo _isSmallPhytomer = new VarInfo();
        
        static VarInfo _deltaAI = new VarInfo();
        #endregion
        
        /// <summary>Constructor</summary>
        static WheatLeafStateVarInfo()
        {
            WheatLeafStateVarInfo.DescribeVariables();
        }
        
        #region IVarInfoClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "Domain class description";
            }
        }
        
        /// <summary>Reference to the ontology</summary>
        public  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Value domain class of reference</summary>
        public  string DomainClassOfReference
        {
            get
            {
                return "WheatLeafState";
            }
        }
        #endregion
        
        #region Public properties
        /// <summary>State of the leaf, 0:Growing, 1:Mature,2:Senescing,3:Dead</summary>
        public static  VarInfo State
        {
            get
            {
                return  _State;
            }
        }
        
        /// <summary>Previous State of the leaf, 0:Growing, 1:Mature,2:Senescing,3:Dead</summary>
        public static  VarInfo PreviousState
        {
            get
            {
                return  _PreviousState;
            }
        }
        
        /// <summary>Flag</summary>
        public static  VarInfo isPrematurelyDying
        {
            get
            {
                return  _isPrematurelyDying;
            }
        }
        
        /// <summary>Thermal Time when the Lamina grows</summary>
        public static  VarInfo TTGroLamina
        {
            get
            {
                return  _TTGroLamina;
            }
        }
        
        /// <summary>Largest area actually achieved by leaf Layer</summary>
        public static  VarInfo MaxAI
        {
            get
            {
                return  _MaxAI;
            }
        }
        
        /// <summary>Thermal Time when Leaf Start Senescing</summary>
        public static  VarInfo TTsen
        {
            get
            {
                return  _TTsen;
            }
        }
        
        /// <summary>Thermal Time at emergence</summary>
        public static  VarInfo TTem
        {
            get
            {
                return  _TTem;
            }
        }
        
        /// <summary>Lamina Area Index</summary>
        public static  VarInfo LaminaAI
        {
            get
            {
                return  _LaminaAI;
            }
        }
        
        /// <summary>Sheath Area Index</summary>
        public static  VarInfo SheathAI
        {
            get
            {
                return  _SheathAI;
            }
        }
        
        /// <summary>Green Area Index</summary>
        public static  VarInfo GAI
        {
            get
            {
                return  _GAI;
            }
        }
        
        /// <summary>Thermal Time at maturity</summary>
        public static  VarInfo TTmat
        {
            get
            {
                return  _TTmat;
            }
        }
        
        /// <summary>Lamina Specific N</summary>
        public static  VarInfo laminaSpecificN
        {
            get
            {
                return  _laminaSpecificN;
            }
        }
        
        /// <summary>Leaf layer Phyllochron</summary>
        public static  VarInfo Phyllochron
        {
            get
            {
                return  _Phyllochron;
            }
        }
        
        /// <summary>1 if the layer's phytomer is "small"</summary>
        public static  VarInfo isSmallPhytomer
        {
            get
            {
                return  _isSmallPhytomer;
            }
        }
        
        /// <summary>Increase of GAI of the day</summary>
        public static  VarInfo deltaAI
        {
            get
            {
                return  _deltaAI;
            }
        }
        #endregion
        
        #region VarInfo values
        /// <summary>Set VarInfo values</summary>
        static void DescribeVariables()
        {
            //   
            _State.Name = "State";
            _State.Description = "State of the leaf, 0:Growing, 1:Mature,2:Senescing,3:Dead";
            _State.MaxValue = 3D;
            _State.MinValue = 0D;
            _State.DefaultValue = 0D;
            _State.Units = "dimensionless";
            _State.URL = "http://";
            _State.ValueType = VarInfoValueTypes.GetInstanceForName("ListInteger");
            //   
            _PreviousState.Name = "PreviousState";
            _PreviousState.Description = "Previous State of the leaf, 0:Growing, 1:Mature,2:Senescing,3:Dead";
            _PreviousState.MaxValue = 3D;
            _PreviousState.MinValue = 0D;
            _PreviousState.DefaultValue = 0D;
            _PreviousState.Units = "dimensionless";
            _PreviousState.URL = "http://";
            _PreviousState.ValueType = VarInfoValueTypes.GetInstanceForName("ListInteger");
            //   
            _isPrematurelyDying.Name = "isPrematurelyDying";
            _isPrematurelyDying.Description = "Flag";
            _isPrematurelyDying.MaxValue = 1D;
            _isPrematurelyDying.MinValue = 0D;
            _isPrematurelyDying.DefaultValue = 0D;
            _isPrematurelyDying.Units = "dimensionless";
            _isPrematurelyDying.URL = "http://";
            _isPrematurelyDying.ValueType = VarInfoValueTypes.GetInstanceForName("ListInteger");
            //   
            _TTGroLamina.Name = "TTGroLamina";
            _TTGroLamina.Description = "Thermal Time when the Lamina grows";
            _TTGroLamina.MaxValue = 3000D;
            _TTGroLamina.MinValue = 0D;
            _TTGroLamina.DefaultValue = 0D;
            _TTGroLamina.Units = "°Cd";
            _TTGroLamina.URL = "http://";
            _TTGroLamina.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _MaxAI.Name = "MaxAI";
            _MaxAI.Description = "Largest area actually achieved by leaf Layer";
            _MaxAI.MaxValue = 1D;
            _MaxAI.MinValue = 0D;
            _MaxAI.DefaultValue = 0D;
            _MaxAI.Units = "mm²/mm²";
            _MaxAI.URL = "http://";
            _MaxAI.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _TTsen.Name = "TTsen";
            _TTsen.Description = "Thermal Time when Leaf Start Senescing";
            _TTsen.MaxValue = 3000D;
            _TTsen.MinValue = 0D;
            _TTsen.DefaultValue = 0D;
            _TTsen.Units = "°Cd";
            _TTsen.URL = "http://";
            _TTsen.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _TTem.Name = "TTem";
            _TTem.Description = "Thermal Time at emergence";
            _TTem.MaxValue = 3000D;
            _TTem.MinValue = 0D;
            _TTem.DefaultValue = 0D;
            _TTem.Units = "°Cd";
            _TTem.URL = "http://";
            _TTem.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _LaminaAI.Name = "LaminaAI";
            _LaminaAI.Description = "Lamina Area Index";
            _LaminaAI.MaxValue = 1D;
            _LaminaAI.MinValue = 0D;
            _LaminaAI.DefaultValue = 0D;
            _LaminaAI.Units = "mm²/mm²";
            _LaminaAI.URL = "http://";
            _LaminaAI.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _SheathAI.Name = "SheathAI";
            _SheathAI.Description = "Sheath Area Index";
            _SheathAI.MaxValue = 1D;
            _SheathAI.MinValue = 0D;
            _SheathAI.DefaultValue = 0D;
            _SheathAI.Units = "mm²/mm²";
            _SheathAI.URL = "http://";
            _SheathAI.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _GAI.Name = "GAI";
            _GAI.Description = "Green Area Index";
            _GAI.MaxValue = 1D;
            _GAI.MinValue = 0D;
            _GAI.DefaultValue = 0D;
            _GAI.Units = "mm²/mm²";
            _GAI.URL = "http://";
            _GAI.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _TTmat.Name = "TTmat";
            _TTmat.Description = "Thermal Time at maturity";
            _TTmat.MaxValue = 3000D;
            _TTmat.MinValue = 0D;
            _TTmat.DefaultValue = 0D;
            _TTmat.Units = "°Cd";
            _TTmat.URL = "http://";
            _TTmat.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _laminaSpecificN.Name = "laminaSpecificN";
            _laminaSpecificN.Description = "Lamina Specific N";
            _laminaSpecificN.MaxValue = 1000D;
            _laminaSpecificN.MinValue = 0D;
            _laminaSpecificN.DefaultValue = 0D;
            _laminaSpecificN.Units = "mg(N)/m²(leaf)";
            _laminaSpecificN.URL = "http://";
            _laminaSpecificN.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _Phyllochron.Name = "Phyllochron";
            _Phyllochron.Description = "Leaf layer Phyllochron";
            _Phyllochron.MaxValue = 10D;
            _Phyllochron.MinValue = 0D;
            _Phyllochron.DefaultValue = 0D;
            _Phyllochron.Units = "°Cd/leaf";
            _Phyllochron.URL = "http://";
            _Phyllochron.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
            //   
            _isSmallPhytomer.Name = "isSmallPhytomer";
            _isSmallPhytomer.Description = "1 if the layer\'s phytomer is \"small\"";
            _isSmallPhytomer.MaxValue = 1D;
            _isSmallPhytomer.MinValue = 0D;
            _isSmallPhytomer.DefaultValue = 0D;
            _isSmallPhytomer.Units = "dimensionless";
            _isSmallPhytomer.URL = "http://";
            _isSmallPhytomer.ValueType = VarInfoValueTypes.GetInstanceForName("ListInteger");
            //   
            _deltaAI.Name = "deltaAI";
            _deltaAI.Description = "Increase of GAI of the day";
            _deltaAI.MaxValue = 1000D;
            _deltaAI.MinValue = 0D;
            _deltaAI.DefaultValue = 0D;
            _deltaAI.Units = "m²/m²";
            _deltaAI.URL = "http://";
            _deltaAI.ValueType = VarInfoValueTypes.GetInstanceForName("ListDouble");
        }
        #endregion
    }
}

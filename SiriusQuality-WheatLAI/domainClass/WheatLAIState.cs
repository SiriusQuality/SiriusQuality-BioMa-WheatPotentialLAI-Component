//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

/// 
/// This class was created from file C:\Users\mancealo\Documents\GitSiriusCode\SiriusCode\Development2\Code\SiriusQuality-WheatLAI\XML\SiriusQualityWheatLAI_WheatLAIState.xml
/// The tool used was: DCC - Domain Class Coder, http://components.biomamodelling.org/, DCC
/// 
/// Loic Manceau
/// loic.manceau@inra.fr
/// INRA
/// 
/// 
/// 10/4/2018 11:31:58 AM
/// 
namespace SiriusQualityWheatLAI
{
    using System;
    using System.Collections.Generic;
    using System.Reflection;
    using CRA.ModelLayer.Core;
    using CRA.ModelLayer.ParametersManagement;
    
    
    /// <summary>WheatLAIState Domain class contains the accessors to values</summary>
    [Serializable()]
    public class WheatLAIState : ICloneable, IDomainClass
    {
        
        #region Private fields
        private int _newLeafHasAppeared;
        
        private double _leafNumber;
        
        private double _finalLeafNumber;
        
        private int _roundedFinalLeafNumber;
        
        private int _phytonum;
        
        private int _index;
        
        private System.Collections.Generic.List<double> _MaximumPotentialLaminaeAI = new List<double>();
        
        private System.Collections.Generic.List<double> _MaximumPotentialSheathAI = new List<double>();
        
        private double _FPAW;
        
        private int _isPotentialLAI;
        
        private double _VPDairCanopy;
        
        private double _DSF;
        
        private double _DEF;
        
        private double _cumulTTShoot;
        
        private double _deltaTTShoot;
        
        private double _deltaTTSenescence;
        
        private double _incDeltaAreaLimitSF;
        
        private System.Collections.Generic.List<double> _WaterLimitedPotDeltaAIList = new List<double>();
        
        private double _potentialIncDeltaArea;
        
        private System.Collections.Generic.List<double> _tilleringProfile = new List<double>();
        
        private System.Collections.Generic.List<double> _leafTillerNumberArray = new List<double>();
        
        private int _previousIndex;
        
        private System.Collections.Generic.List<double> _TTgroSheathList = new List<double>();
        
        private System.Collections.Generic.List<double> _TT = new List<double>();
        
        private double _incDeltaArea;
        
        private double _availableN;
        #endregion
        
        #region Private field for properties
        private ParametersIO _parametersIO;
        #endregion
        
        #region Constructor
        /// <summary>No parameters constructor</summary>
        public WheatLAIState()
        {
            _parametersIO = new ParametersIO(this);
        }

        public WheatLAIState(WheatLAIState toCopy)
        {
                _newLeafHasAppeared = toCopy.newLeafHasAppeared;

                _leafNumber = toCopy.leafNumber;

                _finalLeafNumber = toCopy.finalLeafNumber;

                _roundedFinalLeafNumber = toCopy.roundedFinalLeafNumber;

                _phytonum = toCopy.phytonum;

                _index = toCopy.index;

                _FPAW = toCopy.FPAW;

                _isPotentialLAI = toCopy.isPotentialLAI;

                _VPDairCanopy = toCopy.VPDairCanopy;

                _DSF = toCopy.DSF;

                _DEF = toCopy.DEF;

                _cumulTTShoot = toCopy.cumulTTShoot;

                _deltaTTShoot = toCopy.deltaTTShoot;

                _deltaTTSenescence = toCopy.deltaTTSenescence;

                _incDeltaAreaLimitSF = toCopy.incDeltaAreaLimitSF;

                _potentialIncDeltaArea = toCopy.potentialIncDeltaArea;

                System.Collections.Generic.List<double> _tilleringProfile = new List<double>(toCopy._tilleringProfile);

                System.Collections.Generic.List<double> _leafTillerNumberArray = new List<double>(toCopy._leafTillerNumberArray);

                System.Collections.Generic.List<double> _MaximumPotentialLaminaeAI = new List<double>(toCopy._MaximumPotentialLaminaeAI);
                
                System.Collections.Generic.List<double> _MaximumPotentialSheathAI = new List<double>(toCopy._MaximumPotentialSheathAI);
                
                System.Collections.Generic.List<double> _WaterLimitedPotDeltaAIList = new List<double>(toCopy._WaterLimitedPotDeltaAIList);
                
                System.Collections.Generic.List<double> _TTgroSheathList = new List<double>(toCopy._TTgroSheathList);

                System.Collections.Generic.List<double> _TT = new List<double>(toCopy._TT);

                _previousIndex = toCopy._previousIndex;
                
                _incDeltaArea = toCopy._incDeltaArea;
                
                _availableN = toCopy._availableN;

        }

        #endregion
        
        #region Public properties
        /// <summary>0: if no leaf has appeared, 1 if a leaf has just appeared</summary>
        public int newLeafHasAppeared
        {
            get
            {
                return this._newLeafHasAppeared;
            }
            set
            {
                this._newLeafHasAppeared = value;
            }
        }
        
        /// <summary>Number of emerged leaves on the main-stem</summary>
        public double leafNumber
        {
            get
            {
                return this._leafNumber;
            }
            set
            {
                this._leafNumber = value;
            }
        }
        
        /// <summary> Leaf numer at maturity</summary>
        public double finalLeafNumber
        {
            get
            {
                return this._finalLeafNumber;
            }
            set
            {
                this._finalLeafNumber = value;
            }
        }
        
        /// <summary>rounded leaf number at maturity</summary>
        public int roundedFinalLeafNumber
        {
            get
            {
                return this._roundedFinalLeafNumber;
            }
            set
            {
                this._roundedFinalLeafNumber = value;
            }
        }
        
        /// <summary>Number of leaf layer created</summary>
        public int phytonum
        {
            get
            {
                return this._phytonum;
            }
            set
            {
                this._phytonum = value;
            }
        }
        
        /// <summary>index of the  last  leaf layer created</summary>
        public int index
        {
            get
            {
                return this._index;
            }
            set
            {
                this._index = value;
            }
        }
        
        /// <summary>Maximum allowed Lamina area index without stress effects</summary>
        public System.Collections.Generic.List<double> MaximumPotentialLaminaeAI
        {
            get
            {
                return this._MaximumPotentialLaminaeAI;
            }
            set
            {
                this._MaximumPotentialLaminaeAI = value;
            }
        }
        
        /// <summary>Maximum Sheat area index allowed without stress effect</summary>
        public System.Collections.Generic.List<double> MaximumPotentialSheathAI
        {
            get
            {
                return this._MaximumPotentialSheathAI;
            }
            set
            {
                this._MaximumPotentialSheathAI = value;
            }
        }
        
        /// <summary>Fraction of plant available water</summary>
        public double FPAW
        {
            get
            {
                return this._FPAW;
            }
            set
            {
                this._FPAW = value;
            }
        }
        
        /// <summary>0: no drought stress is applied, 1: drought stress is applied</summary>
        public int isPotentialLAI
        {
            get
            {
                return this._isPotentialLAI;
            }
            set
            {
                this._isPotentialLAI = value;
            }
        }
        
        /// <summary>Vapour Pressur deficit Air-Canopy</summary>
        public double VPDairCanopy
        {
            get
            {
                return this._VPDairCanopy;
            }
            set
            {
                this._VPDairCanopy = value;
            }
        }
        
        /// <summary>drought senescence factor</summary>
        public double DSF
        {
            get
            {
                return this._DSF;
            }
            set
            {
                this._DSF = value;
            }
        }
        
        /// <summary>drought expansion factor</summary>
        public double DEF
        {
            get
            {
                return this._DEF;
            }
            set
            {
                this._DEF = value;
            }
        }
        
        /// <summary>Cumulative Shoot thermal time</summary>
        public double cumulTTShoot
        {
            get
            {
                return this._cumulTTShoot;
            }
            set
            {
                this._cumulTTShoot = value;
            }
        }
        
        /// <summary>Increas of shoot thermal time for the day</summary>
        public double deltaTTShoot
        {
            get
            {
                return this._deltaTTShoot;
            }
            set
            {
                this._deltaTTShoot = value;
            }
        }
        
        /// <summary>Increase of senescence thermal time for the day</summary>
        public double deltaTTSenescence
        {
            get
            {
                return this._deltaTTSenescence;
            }
            set
            {
                this._deltaTTSenescence = value;
            }
        }
        
        /// <summary>Total daily increase of GAI under drought stress</summary>
        public double incDeltaAreaLimitSF
        {
            get
            {
                return this._incDeltaAreaLimitSF;
            }
            set
            {
                this._incDeltaAreaLimitSF = value;
            }
        }
        
        /// <summary>list on each phytomer for the potential daily increase of leaf layer</summary>
        public System.Collections.Generic.List<double> WaterLimitedPotDeltaAIList
        {
            get
            {
                return this._WaterLimitedPotDeltaAIList;
            }
            set
            {
                this._WaterLimitedPotDeltaAIList = value;
            }
        }
        
        /// <summary>Total daily increase in GAI without stress</summary>
        public double potentialIncDeltaArea
        {
            get
            {
                return this._potentialIncDeltaArea;
            }
            set
            {
                this._potentialIncDeltaArea = value;
            }
        }
        
        /// <summary>store the amount of new tiller created at each time a new tiller appears</summary>
        public System.Collections.Generic.List<double> tilleringProfile
        {
            get
            {
                return this._tilleringProfile;
            }
            set
            {
                this._tilleringProfile = value;
            }
        }
        
        /// <summary>store the number of tiller for each leaf layer</summary>
        public System.Collections.Generic.List<double> leafTillerNumberArray
        {
            get
            {
                return this._leafTillerNumberArray;
            }
            set
            {
                this._leafTillerNumberArray = value;
            }
        }
        
        /// <summary>index of the leaf layer during the last call of the component</summary>
        public int previousIndex
        {
            get
            {
                return this._previousIndex;
            }
            set
            {
                this._previousIndex = value;
            }
        }
        
        /// <summary>List of Thermal Time at end of the sheath growth</summary>
        public System.Collections.Generic.List<double> TTgroSheathList
        {
            get
            {
                return this._TTgroSheathList;
            }
            set
            {
                this._TTgroSheathList = value;
            }
        }
        
        /// <summary>List of Thermal times since emergence of this leaf Layer</summary>
        public System.Collections.Generic.List<double> TT
        {
            get
            {
                return this._TT;
            }
            set
            {
                this._TT = value;
            }
        }
        
        /// <summary>Actual increase in Area of the day</summary>
        public double incDeltaArea
        {
            get
            {
                return this._incDeltaArea;
            }
            set
            {
                this._incDeltaArea = value;
            }
        }
        
        /// <summary>Available Nitrogen of the day</summary>
        public double availableN
        {
            get
            {
                return this._availableN;
            }
            set
            {
                this._availableN = value;
            }
        }
        #endregion
        
        #region IDomainClass members
        /// <summary>Domain Class description</summary>
        public virtual  string Description
        {
            get
            {
                return "Domain class description";
            }
        }
        
        /// <summary>Domain Class URL</summary>
        public virtual  string URL
        {
            get
            {
                return "http://";
            }
        }
        
        /// <summary>Domain Class Properties</summary>
        public virtual IDictionary<string, PropertyInfo> PropertiesDescription
        {
            get
            {
                return _parametersIO.GetCachedProperties(typeof(IDomainClass));
            }
        }
        #endregion
        
        /// <summary>Clears the values of the properties of the domain class by using the default value for the type of each property (e.g '0' for numbers, 'the empty string' for strings, etc.)</summary>
        public virtual Boolean ClearValues()
        {
            _newLeafHasAppeared = default(System.Int32);
            _leafNumber = default(System.Double);
            _finalLeafNumber = default(System.Double);
            _roundedFinalLeafNumber = default(System.Int32);
            _phytonum = default(System.Int32);
            _index = default(System.Int32);
            _MaximumPotentialLaminaeAI = new List<double>();
            _MaximumPotentialSheathAI = new List<double>();
            _FPAW = default(System.Double);
            _isPotentialLAI = default(System.Int32);
            _VPDairCanopy = default(System.Double);
            _DSF = default(System.Double);
            _DEF = default(System.Double);
            _cumulTTShoot = default(System.Double);
            _deltaTTShoot = default(System.Double);
            _deltaTTSenescence = default(System.Double);
            _incDeltaAreaLimitSF = default(System.Double);
            _WaterLimitedPotDeltaAIList = new List<double>();
            _potentialIncDeltaArea = default(System.Double);
            _tilleringProfile = new List<double>();
            _leafTillerNumberArray = new List<double>();
            _previousIndex = default(System.Int32);
            _TTgroSheathList = new List<double>();
            _TT = new List<double>();
            _incDeltaArea = default(System.Double);
            _availableN = default(System.Double);
            // Returns true if everything is ok
            return true;
        }
        
        #region Clone
        /// <summary>Implement ICloneable.Clone()</summary>
        public virtual Object Clone()
        {
            // Shallow copy by default
            IDomainClass myclass = (IDomainClass) this.MemberwiseClone();
            _parametersIO.PopulateClonedCopy(myclass);
            return myclass;
        }
        #endregion
    }
}
